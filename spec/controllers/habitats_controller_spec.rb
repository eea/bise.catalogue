require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HabitatsController do

  let(:user) do
    FactoryGirl.create(:user)
  end

  before :each do
    @request.env["devise.mapping"] = Devise.mappings[:user]
    sign_in user
  end

  # This should return the minimal set of attributes required to create a valid
  # Habitat. As you add validations to Habitat, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      uri: "MyString"
    }
  end

  describe "GET index" do
    it "assigns all habitats as @habitats" do
      habitat = FactoryGirl.create :habitat
      get :index, {}
      assigns(:habitats).should be_a(Tire::Results::Collection)
    end
  end

  describe "GET show" do
    it "assigns the requested habitat as @habitat" do
      habitat = FactoryGirl.create :habitat
      get :show, {:id => habitat.to_param}
      assigns(:habitat).should eq(habitat)
    end
  end

end
